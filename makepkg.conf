#!/hint/bash
# shellcheck disable=2034

#
# /etc/makepkg.conf
#

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -qgC - -o %o %u'
          'ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::breezy'
            'fossil::fossil'
            'git::git'
            'hg::mercurial'
            'svn::subversion')



#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH="x86_64"
CHOST="x86_64-pc-linux-gnu"

if [ "$USE_COMPILER" = "clang" ]; then
  export CC=clang
  export CXX=clang++
  export LD=ld.lld
  export CC_LD=lld
  export CXX_LD=lld
  export AR=llvm-ar
  export NM=llvm-nm
  export STRIP=llvm-strip
  export OBJCOPY=llvm-objcopy
  export OBJDUMP=llvm-objdump
  export READELF=llvm-readelf
  export RANLIB=llvm-ranlib
  export HOSTCC=clang
  export HOSTCXX=clang++
  export HOSTAR=llvm-ar
  export HOSTLD=ld.lld
  export LLVM=1
  export LLVM_IAS=1
fi

if [ "$USE_COMPILER" = "gcc" ]; then
export CC="gcc"
export CXX="g++"
unset LD
unset CC_LD
unset CXX_LD
unset AR
unset NM
unset STRIP
unset OBJCOPY
unset OBJDUMP
unset READELF
unset RANLIB
unset HOSTCC
unset HOSTCXX
unset HOSTAR
unset HOSTLD
unset LLVM
unset LLVM_IAS
set -e $LD
set -e $CC_LD
set -e $CXX_LD
set -e $AR
set -e $NM
set -e $STRIP
set -e $OBJCOPY
set -e $OBJDUMP
set -e $READELF
set -e $RANLIB
set -e $HOSTCC
set -e $HOSTCXX
set -e $HOSTAR
set -e $HOSTLD
set -e $LLVM
set -e $LLVM_IAS
fi

PACKAGECARCH="x86_64"
#-- Compiler and Linker Flags
if [ "$PROFILE" = "clang-polly" ]; then
CFLAGS="-march=native -mtune=native -O3 -fdata-sections -flto=auto -fno-plt -fomit-frame-pointer -fno-unwind-tables -funsafe-math-optimizations -fno-stack-protector -pthread -fno-math-errno -fno-trapping-math -fno-semantic-interposition -fcf-protection=none -ffunction-sections -mharden-sls=none -mllvm -enable-interleaved-mem-accesses -mllvm -enable-unroll-and-jam -mllvm -polly -mllvm -polly-num-threads=$(nproc) -mllvm -polly-run-dce -mllvm -polly-invariant-load-hoisting -mllvm -polly-loopfusion-greedy -mllvm -polly-vectorizer=stripmine -mllvm -enable-loop-distribute -mllvm -polly-run-inliner -mllvm -polly-ast-use-context -mllvm -polly-optimizer=isl -mllvm -inline-threshold=1500 -Wno-unused-command-line-argument -mllvm -enable-gvn-hoist -mllvm -enable-nontrivial-unswitch -mllvm -polly-position=early -mllvm -polly-dependences-computeout=600000 -mllvm -polly-detect-profitability-min-per-loop-insts=40 -mllvm -polly-tiling -mllvm -polly-2nd-level-tiling -mllvm -polly-enable-delicm=true -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1 -funroll-loops -mllvm -aggressive-ext-opt -mllvm -unroll-runtime-multi-exit -mllvm -enable-loop-flatten -mllvm -enable-loopinterchange -mllvm -slp-vectorize-hor-store -mllvm -enable-cond-stores-vec -mllvm -extra-vectorizer-passes"
CXXFLAGS="$CFLAGS -Wp,-U_GLIBCXX_ASSERTIONS"
LDFLAGS="-Wl,-O3,-Bsymbolic-functions,--sort-common,--as-needed,--strip-all -lpthread -flto=jobserver -flto=auto -Wl,-z,pack-relative-relocs -Wl,--gc-sections"
CCLDFLAGS="$LDFLAGS"
CXXLDFLAGS="$LDFLAGS"
LTOFLAGS="-flto=auto"
RUSTFLAGS="-C opt-level=3 -C target-cpu=native -C link-arg=-fuse-ld=lld -C link-arg=-Wl,--no-rosegment -C codegen-units=1 -C panic=abort -Zpanic_abort_tests -C embed-bitcode=yes -C llvm-args=-unroll-threshold=1000"
fi

if [ "$PROFILE" = "clang" ]; then
CFLAGS="-march=native -mtune=native -O3 -fdata-sections -fno-plt -flto=auto -fomit-frame-pointer -funroll-loops -fno-unwind-tables -funsafe-math-optimizations -fno-stack-protector -pthread -fno-math-errno -fno-trapping-math -fno-semantic-interposition -fcf-protection=none -ffunction-sections -mharden-sls=none"
CXXFLAGS="$CFLAGS -Wp,-U_GLIBCXX_ASSERTIONS"
LDFLAGS="-Wl,-O3,-Bsymbolic-functions,--sort-common,--as-needed,--strip-all -lpthread -flto=auto -flto=jobserver -Wl,-z,pack-relative-relocs -Wl,--gc-sections"
CCLDFLAGS="$LDFLAGS"
CXXLDFLAGS="$LDFLAGS"
LTOFLAGS="-flto=auto"
RUSTFLAGS="-C opt-level=3 -C target-cpu=native -C link-arg=-fuse-ld=lld -C link-arg=-Wl,--no-rosegment -C codegen-units=1 -C panic=abort -Zpanic_abort_tests -C embed-bitcode=yes -C llvm-args=-unroll-threshold=1000"
fi

if [ "$PROFILE" = "clang-stable" ]; then
CFLAGS="-march=native -mtune=native -O3 -fno-stack-protector -fno-plt -fcf-protection=none -mharden-sls=none -fomit-frame-pointer -fno-unwind-tables"
CXXFLAGS="$CFLAGS"
LDFLAGS="-Wl,-O1 -Wl,--sort-common,--as-needed,--strip-all"
CCLDFLAGS="$LDFLAGS"
CXXLDFLAGS="$LDFLAGS"
LTOFLAGS="-flto=auto"
RUSTFLAGS="-C opt-level=3 -C target-cpu=native \
           -C link-arg=-Wl,--no-rosegment \
           -C codegen-units=1"
fi

if [ "$PROFILE" = "gcc" ]; then
CFLAGS="-march=native -mtune=native -O3 -fdata-sections -flto=auto -fno-plt -flto-partition=one -funroll-loops -fno-unwind-tables -fdevirtualize-at-ltrans -fomit-frame-pointer -funsafe-math-optimizations -fno-ident -fno-stack-protector -pthread -fno-math-errno -fno-trapping-math -fno-semantic-interposition -fcf-protection=none -fivopts -ffunction-sections -fprofile-correction -floop-nest-optimize -fipa-pta -fgraphite-identity -floop-strip-mine -fmodulo-sched -flive-range-shrinkage -mharden-sls=none"
CXXFLAGS="$CFLAGS -Wp,-U_GLIBCXX_ASSERTIONS"
LDFLAGS="-Wl,-O3 -Wl,-Bsymbolic-functions,--sort-common,--as-needed,--strip-all -flto=auto -lpthread -flto=jobserver -Wl,-z,pack-relative-relocs -Wl,--gc-sections"
CCLDFLAGS="$LDFLAGS"
CXXLDFLAGS="$LDFLAGS"
LTOFLAGS="-flto=auto -flto-partition=one -fdevirtualize-at-ltrans"
RUSTFLAGS="-C opt-level=3 -C target-cpu=native -C link-arg=-Wl,--no-rosegment -C codegen-units=1 -C panic=abort -Zpanic_abort_tests -C embed-bitcode=yes"
fi

if [ "$PROFILE" = "gcc-stable" ]; then
CFLAGS="-march=native -mtune=native -O3 -fno-stack-protector -fno-plt -fcf-protection=none -mharden-sls=none -fomit-frame-pointer -fno-unwind-tables"
CXXFLAGS="$CFLAGS -Wp,-U_GLIBCXX_ASSERTIONS"
LDFLAGS="-Wl,-O1 -Wl,--sort-common,--as-needed,--strip-all -Wl,-z,pack-relative-relocs"
CCLDFLAGS="$LDFLAGS"
CXXLDFLAGS="$LDFLAGS"
LTOFLAGS="-flto=auto"
RUSTFLAGS="-C opt-level=3 -C target-cpu=native \
           -C link-arg=-Wl,--no-rosegment \
           -C codegen-units=1"
fi
#-- Make Flags: change this for DistCC/SMP systems
MAKEFLAGS="-j$(nproc)"
NINJAFLAGS="-j$(nproc)"
#-- Debugging flags
DEBUG_CFLAGS="-g"
DEBUG_CXXFLAGS="$DEBUG_CFLAGS"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Makepkg defaults: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto !autodeps)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#-- lto:        Add compile flags for building with link time optimization
#-- autodeps:   Automatically add depends/provides
#
OPTIONS=(strip docs !libtool !staticlibs emptydirs zipman purge !debug lto !autodeps)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"
#-- Prefix and directories for library autodeps
LIB_DIRS=('lib:usr/lib' 'lib32:usr/lib32')

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Log files: specify a fixed directory where all log files will be placed
#LOGDEST=/home/makepkglogs
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSZST=(zstd -c -T0 -9 -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.gz'

#########################################################################
# OTHER
#########################################################################
#
#-- Command used to run pacman as root, instead of trying sudo and su
#PACMAN_AUTH=()
# vim: set ft=sh ts=2 sw=2 et:
